  $query2 = DB::table('matakuliah as mk')
            ->join('mahasiswa as m', 'm.nim', '=', 'mk.nim')
            ->join('jurusan as j', 'mk.kd_jurusan', '=', 'j.kd_jurusan')
            ->join('propinsi as p', 'm.kd_propinsi', '=', 'p.kd_propinsi')
            ->join('kota as k', 'm.kd_kota', '=', 'k.kd_kota')
            ->select(
                DB::raw("CASE 
                    WHEN p.kd_propinsi IN ('P00003', 'P00006') 
                         OR k.kd_kota IN ('KH00004', 'KH00005', 'KH00011', 'KH00021', 'KH00022', 'KH00023') 
                    THEN 'Dalam Jabodetabek'
                    ELSE 'Luar Jabodetabek'
                END AS lokasi"),
                DB::raw("COUNT(*) AS total_mahasiswa"),
                DB::raw("COUNT(CASE WHEN mk.status IN ('Tidak Aktif', 'Aktif', 'Cuti', 'Drop Out', 'Mengundurkan Diri') THEN 1 END) AS belum_lulus"),
                DB::raw("COUNT(CASE WHEN mk.status = 'Lulus' THEN 1 END) AS lulus")
            )
            ->where('j.jurusan', '=', 'Teknik Informatika') // Menambahkan kondisi jurusan
            ->groupBy('lokasi') // Menggunakan alias lokasi yang sudah didefinisikan di select
            ->orderBy('lokasi');

             CASE WHEN mk.status IN ('Tidak Aktif', 'Aktif', 'Cuti', 'Drop Out', 'Mengundurkan Diri' AS belum_lulus",
               else lulus END AS kategori


            public function index(Request $request)
{
    $years = DB::table('mahasiswa as m')
        ->select(DB::raw('YEAR(m.tahun_angkatan) as year'))
        ->groupBy('year')
        ->orderBy('year', 'DESC')
        ->get();

    $predictedLulus = $request->input('predicted_lulus'); // Ambil input dari pengguna

    $year = $request->input('year');
    $result1 = [];
    $result2 = [];
    $entropyTotal1 = 0;
    $entropyTotal2 = 0;

    DB::statement("SET SESSION sql_mode = (SELECT REPLACE(@@SESSION.sql_mode, 'ONLY_FULL_GROUP_BY', ''))");

    if ($year) {

        
        // Query 1
        $query1 = DB::table('matakuliah as mk')
            ->join('mahasiswa as m', 'm.nim', '=', 'mk.nim')
            ->join('jurusan as j', 'mk.kd_jurusan', '=', 'j.kd_jurusan')
            ->select(
                DB::raw("CASE 
                        WHEN mk.status IN ('Aktif', 'Cuti', 'Drop Out', 'Mengundurkan Diri') THEN 'Belum Lulus' 
                        WHEN mk.status = 'Lulus' THEN 'Lulus'
                        ELSE 'Lulus'  
                END AS jenis_status"),
                DB::raw("COUNT(m.nim) AS total_mahasiswa")
            )
            ->where('j.jurusan', 'Teknik Informatika');
        
        
            
        // Filter by year if provided
        if ($year && $year !== 'Semua') {
            $query1->whereYear('m.tahun_angkatan', '=', $year);
        }

        // Execute the queries
        $result1 = $query1->groupBy('jenis_status')->orderBy('jenis_status')->get();

        // Calculate entropy for result1
        $statusCount1 = [];
        foreach ($result1 as $item) {
            $statusCount1[$item->jenis_status] = $item->total_mahasiswa;
        }

        $total1 = array_sum($statusCount1);

        $entropyTotal1 = 0;
        foreach ($statusCount1 as $count) {
            if ($count > 0) {
                $probability = $count / $total1;
                $entropyTotal1 -= $probability * log($probability, 2); // Rumus Entropi
            }
        }

         // Validasi input predictedLulus
        if ($predictedLulus > $total1) {
            // Jika nilai lebih dari total mahasiswa, berikan pesan kesalahan
            return redirect()->back()->withErrors(['predicted_lulus' => 'Data tidak valid: nilai lebih dari total mahasiswa.']);
        }

        // Jika valid, set predictedLulus
        $predictedLulus = max(0, (int)$predictedLulus); // Pastikan nilainya tidak negatif

        // Call calculateEvaluationMatriks function
        $evaluation = $this->calculateEvaluationMatriks($result1, $predictedLulus); // Pass result1 and predictedLulus to the function

    }

    return view('dashboard.utama', compact('years', 'result1', 'total2', 'total3', 'total4',
     'total5', 'total6', 'total7',  'total8', 'year', 'entropyTotal1', 'entropyTotal2'));
}

public function calculateEvaluationMatriks(object $items, float $total1, int $predictedLulus): array
        {
    

            // Siapkan data untuk evaluasi
            $data1 = [
                'total_mahasiswa' => $items->total_mahasiswa,
                'belum_lulus' => $items->belum_lulus,
                'lulus' => $items->lulus,
            ];

            // Inisialisasi TP, TN, FN, FP
            $TP = $data1['lulus']; // True Positive
            $TN = $data1['belum_lulus']; // True Negative

            // Hitung FN dan FP berdasarkan prediksi
            $FN = 0;
            $FP = 0;

            if ($predictedLulus < $data1['lulus']) {
                $FN = $data1['lulus'] - $predictedLulus; // Menghitung False Negatives
            } elseif ($predictedLulus > $data1['lulus']) {
                $FP = $predictedLulus - $data1['lulus']; // Menghitung False Positives
            }

            // Hitung akurasi
            $accuracy = ($TP + $TN) > 0 ? ($TP + $TN) / ($TP + $TN + $FP + $FN) : 0;

            // Tambahkan FN dan FP ke dalam data1 sebagai TP dan TN
            $data1['TP'] = $TP; // Menyimpan True Positive
            $data1['TN'] = $TN; // Menyimpan True Negative
            $data1['FN'] = $FN; // Menyimpan False Negative
            $data1['FP'] = $FP; // Menyimpan False Positive
            $data1['accuracy'] = $accuracy; // Menyimpan akurasi

            // Mengembalikan data1
            return $data1;
        }

Untuk menentukan cara yang **efektif** dalam mengevaluasi prediksi kelulusan (300 mahasiswa) dari total mahasiswa (840), dengan jumlah yang lulus sebenarnya adalah **293**, kita perlu memahami **tujuan evaluasi** Anda. Berikut adalah analisis untuk membantu memilih cara yang lebih tepat:

---

### **Evaluasi yang Efektif**
**Prediksi**:
- **Prediksi kelulusan**: 300 mahasiswa.
- **Yang lulus sebenarnya**: 293 mahasiswa.

Langkah evaluasi berdasarkan **Confusion Matrix**:
1. **True Positive (TP)**: Mahasiswa yang diprediksi lulus dan benar-benar lulus.
   - **Nilai TP** = 293 (jumlah mahasiswa yang benar-benar lulus, semuanya sudah termasuk dalam prediksi kelulusan).
2. **False Positive (FP)**: Mahasiswa yang diprediksi lulus tetapi sebenarnya tidak lulus.
   - **Nilai FP** = Prediksi kelulusan - TP = 300 - 293 = 7.
3. **True Negative (TN)**: Mahasiswa yang diprediksi tidak lulus dan benar-benar tidak lulus.
   - **Nilai TN** = Total mahasiswa yang tidak lulus - FP = (840 - 293) - 7 = 540.
4. **False Negative (FN)**: Mahasiswa yang diprediksi tidak lulus tetapi sebenarnya lulus.
   - **Nilai FN** = 0 (dengan asumsi semua lulus sudah diprediksi dalam prediksi kelulusan).

---

### **Langkah 1: Akurasi**
Akurasi adalah **efektivitas keseluruhan prediksi**:

\[
\text{Akurasi} = \frac{TP + TN}{TP + TN + FP + FN}
\]

Substitusi nilai:
\[
\text{Akurasi} = \frac{293 + 540}{293 + 540 + 7 + 0} = \frac{833}{840} \approx 0.9917
\]

**Akurasi**: **99.17%**.

---

### **Langkah 2: Precision**
Precision adalah **ketepatan prediksi mahasiswa lulus** (seberapa banyak prediksi benar dari semua yang diprediksi lulus):

\[
\text{Precision} = \frac{TP}{TP + FP}
\]

Substitusi nilai:
\[
\text{Precision} = \frac{293}{293 + 7} = \frac{293}{300} \approx 0.9767
\]

**Precision**: **97.67%**.

---

### **Langkah 3: Recall**
Recall adalah **seberapa baik sistem memprediksi semua mahasiswa yang benar-benar lulus**:

\[
\text{Recall} = \frac{TP}{TP + FN}
\]

Substitusi nilai:
\[
\text{Recall} = \frac{293}{293 + 0} = 1.0
\]

**Recall**: **100%**.

---

### **Mana yang Lebih Efektif?**
- **Akurasi (99.17%)**: Menunjukkan sistem prediksi sangat efektif secara keseluruhan.
- **Precision (97.67%)**: Fokus pada ketepatan prediksi lulus, cukup tinggi tapi menunjukkan sedikit kesalahan (7 mahasiswa diprediksi lulus tetapi tidak lulus).
- **Recall (100%)**: Sangat efektif karena semua mahasiswa yang benar-benar lulus terprediksi.

Jika tujuan Anda adalah **meminimalkan kesalahan prediksi lulus** (menghindari False Positives), maka fokus pada **Precision** lebih efektif.  
Namun, jika tujuan utama adalah **menangkap semua yang benar-benar lulus**, **Recall** adalah metrik yang lebih baik.

Apakah ini sesuai dengan kebutuhan evaluasi Anda?




   

$data1 = [ 
            'total_mahasiswa' => $item->total_mahasiswa,
            'belum_lulus' => $item->belum_lulus,
            'lulus' => $item->lulus
        ];
 // Accuracy Calculation 
$accuracy = 0; 

foreach ($data1 as $key => $value) { 
       if ($key != 'total_mahasiswa' && $value > 0) { 
             $TP = $item->lulus
             $TN = $item->belum_lulus - <--input dari prediksi lulus -->
             if <--input dari prediksi lulus --> lebih kecil $item->lulus maka   $item->lulus - <--input dari prediksi lulus --> =$FN else 0
             if <--input dari prediksi lulus --> lebih besar $item->lulus maka   <--input dari prediksi lulus --> - $item->lulus   =$FP  else 0
             $accuracy = $tp+tn/tp+tn+fp+fn; 
             
        } 
  } 

   $data1['accuracy'] = $accuracy;



   <?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class UtamaController extends Controller
{
    
    public function index(Request $request)
{
    // Ambil tahun dari database
    $years = DB::table('mahasiswa as m')
        ->select(DB::raw('YEAR(m.tahun_angkatan) as year'))
        ->groupBy('year')
        ->orderBy('year', 'DESC')
        ->get();

    // Ambil input dari pengguna
    $predictedLulus = $request->input('predicted_lulus'); // Ambil input dari pengguna
    $year = $request->input('year', 'Semua'); 

    // Debugging: Cek nilai year dan predictedLulus
    \Log::info('Year: ' . $year);
    \Log::info('Predicted Lulus: ' . $predictedLulus);

    // Query 1: Mengambil data jenis status dan jumlah mahasiswa
    $query10 = DB::table('matakuliah as mk')
    ->join('mahasiswa as m', 'm.nim', '=', 'mk.nim')
    ->join('jurusan as j', 'mk.kd_jurusan', '=', 'j.kd_jurusan')
    ->join('jenis_sekolah_mahasiswa_baru as js', 'js.kd_jenis_sekolah', '=', 'm.kd_jenis_sekolah') // Assuming you have a table for jenis_sekolah
    ->select(
        'js.jenis_sekolah',
        'mk.status',
        // keterangan_sks
        DB::raw("CASE 
            WHEN mk.sks >= 144 THEN 'Memenuhi'
            ELSE 'Belum Memenuhi'
        END AS keterangan_sks"),
        // kategori_ipk
        DB::raw("CASE 
            WHEN mk.ipk >= 2.75 AND mk.ipk < 3.00 THEN 'Memuaskan'
            WHEN mk.ipk >= 3.00 AND mk.ipk < 3.50 THEN 'Sangat Memuaskan'
            WHEN mk.ipk >= 3.50 THEN 'Pujian'
            ELSE 'Perbaiki'
        END AS kategori_ipk"),
        // kategori_pkl
        DB::raw("CASE 
            WHEN mk.praktek_kerja_lapangan_pkl IS NOT NULL AND mk.praktek_kerja_lapangan_pkl != '' THEN 
                CONCAT('Semester ', mk.praktek_kerja_lapangan_pkl)
            WHEN mk.kuliah_kerja_lapangan IS NOT NULL AND mk.kuliah_kerja_lapangan != '' THEN 
                CONCAT('Semester ', mk.kuliah_kerja_lapangan)
            WHEN mk.praktek_kerja_lapangan_pkl IS NULL AND mk.kuliah_kerja_lapangan IS NULL THEN 
                NULL
            ELSE 
                CASE 
                    WHEN mk.status = 'Lulus' THEN 'Lulus Tidak Terdata'
                    ELSE 'Belum Daftar'
                END
        END AS kategori_pkl"),
        // kategori_kkn
        DB::raw("CASE 
            WHEN mk.kuliah_kerja_nyata IS NOT NULL AND mk.kuliah_kerja_nyata != '' THEN 
                CONCAT('Semester ', mk.kuliah_kerja_nyata)
            WHEN mk.kuliah_kerja_nyata_kkn IS NOT NULL AND mk.kuliah_kerja_nyata_kkn != '' THEN 
                CONCAT('Semester ', mk.kuliah_kerja_nyata_kkn)
            WHEN mk.kuliah_kerja_nyata IS NULL AND mk.kuliah_kerja_nyata_kkn IS NULL THEN 
                NULL
            ELSE 
                CASE 
                    WHEN mk.status = 'Lulus' THEN 'lulus tidak terdata'
                    ELSE 'Belum Daftar'
                END
        END AS kategori_kkn"),
        // kategori_seminar
        DB::raw("CASE 
            WHEN mk.seminar IS NULL OR mk.seminar = '' THEN 
                CASE 
                    WHEN mk.status = 'Lulus' THEN 'lulus tidak terdata'
                    ELSE 'Belum Daftar'
                END
            ELSE 
                CONCAT('Semester ', mk.seminar)
        END AS kategori_seminar"),
        // kategori
        DB::raw("CASE 
            WHEN mk.status IN ('Tidak Aktif', 'Aktif', 'Cuti', 'Drop Out', 'Mengundurkan Diri') THEN 'belum_lulus'
            ELSE 'lulus' 
        END AS kategori")
    )
    ->where('j.jurusan', '=', 'Teknik Informatika'); 

    // Filter by year if provided
    if ($year && $year !== 'Semua') {
        $query10->whereYear('m.tahun_angkatan', '=', $year);
    }

    // Eksekusi query untuk mengambil hasil
    $result10 = $query10->get();

   
    // Kirim semua variabel ke view
    return view('dashboard.utama', compact('years', 'predictedLulus', 'year', 'result1', 
    'total2', 'entropyTotal1', 'evaluation', 'totalMahasiswa'));
}
    
    
    
   
}